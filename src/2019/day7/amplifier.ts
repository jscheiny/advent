import { executeProgram, getInitialProgramState } from "../intcode/execute";

function getAllPhaseSequences(lower: number, upper: number, head: number[] = []): number[][] {
    if (head.length === upper - lower + 1) {
        return [[]];
    }

    const sequences: number[][] = [];
    for (let value = lower; value <= upper; value++) {
        if (head.indexOf(value) !== -1) {
            continue;
        }
        for (const subSequence of getAllPhaseSequences(lower, upper, [...head, value])) {
            sequences.push([value, ...subSequence]);
        }
    }
    return sequences;
}

function executePhaseSequence(program: number[], phases: number[]) {
    const computerStates = phases.map(phase => getInitialProgramState(program, [phase]));
    const lastComputer = computerStates[computerStates.length - 1];
    let output = 0;
    while (!lastComputer.halted) {
        for (const state of computerStates) {
            state.input.push(output);

            executeProgram(state);

            output = state.output[0];
            state.output = [];
        }
    }

    return output;
}

function getBestPhaseSequenceValue(program: number[]) {
    // console.log(executePhaseSequence(program, [9, 7, 8, 5, 6]));
    // console.log(getAllPhaseSequences(5, 9).length);
    let maxOutput = -Infinity;
    let maxPhaseSequence: number[] = [];
    for (const phaseSequence of getAllPhaseSequences(5, 9)) {
        const output = executePhaseSequence(program, phaseSequence);
        if (output > maxOutput) {
            maxOutput = output;
            maxPhaseSequence = phaseSequence;
        }
    }
    console.log(maxOutput);
    console.log(maxPhaseSequence);
}

getBestPhaseSequenceValue([
    3,
    8,
    1001,
    8,
    10,
    8,
    105,
    1,
    0,
    0,
    21,
    34,
    43,
    60,
    81,
    94,
    175,
    256,
    337,
    418,
    99999,
    3,
    9,
    101,
    2,
    9,
    9,
    102,
    4,
    9,
    9,
    4,
    9,
    99,
    3,
    9,
    102,
    2,
    9,
    9,
    4,
    9,
    99,
    3,
    9,
    102,
    4,
    9,
    9,
    1001,
    9,
    4,
    9,
    102,
    3,
    9,
    9,
    4,
    9,
    99,
    3,
    9,
    102,
    4,
    9,
    9,
    1001,
    9,
    2,
    9,
    1002,
    9,
    3,
    9,
    101,
    4,
    9,
    9,
    4,
    9,
    99,
    3,
    9,
    1001,
    9,
    4,
    9,
    102,
    2,
    9,
    9,
    4,
    9,
    99,
    3,
    9,
    102,
    2,
    9,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    2,
    9,
    4,
    9,
    3,
    9,
    102,
    2,
    9,
    9,
    4,
    9,
    3,
    9,
    101,
    1,
    9,
    9,
    4,
    9,
    3,
    9,
    1002,
    9,
    2,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    2,
    9,
    4,
    9,
    3,
    9,
    101,
    2,
    9,
    9,
    4,
    9,
    3,
    9,
    101,
    1,
    9,
    9,
    4,
    9,
    3,
    9,
    102,
    2,
    9,
    9,
    4,
    9,
    3,
    9,
    1002,
    9,
    2,
    9,
    4,
    9,
    99,
    3,
    9,
    101,
    2,
    9,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    1,
    9,
    4,
    9,
    3,
    9,
    101,
    1,
    9,
    9,
    4,
    9,
    3,
    9,
    102,
    2,
    9,
    9,
    4,
    9,
    3,
    9,
    1002,
    9,
    2,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    1,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    2,
    9,
    4,
    9,
    3,
    9,
    101,
    1,
    9,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    1,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    2,
    9,
    4,
    9,
    99,
    3,
    9,
    1002,
    9,
    2,
    9,
    4,
    9,
    3,
    9,
    102,
    2,
    9,
    9,
    4,
    9,
    3,
    9,
    1002,
    9,
    2,
    9,
    4,
    9,
    3,
    9,
    102,
    2,
    9,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    1,
    9,
    4,
    9,
    3,
    9,
    1002,
    9,
    2,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    2,
    9,
    4,
    9,
    3,
    9,
    101,
    1,
    9,
    9,
    4,
    9,
    3,
    9,
    101,
    2,
    9,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    2,
    9,
    4,
    9,
    99,
    3,
    9,
    101,
    2,
    9,
    9,
    4,
    9,
    3,
    9,
    101,
    1,
    9,
    9,
    4,
    9,
    3,
    9,
    101,
    1,
    9,
    9,
    4,
    9,
    3,
    9,
    101,
    1,
    9,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    1,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    2,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    2,
    9,
    4,
    9,
    3,
    9,
    102,
    2,
    9,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    2,
    9,
    4,
    9,
    3,
    9,
    1002,
    9,
    2,
    9,
    4,
    9,
    99,
    3,
    9,
    1001,
    9,
    1,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    1,
    9,
    4,
    9,
    3,
    9,
    1002,
    9,
    2,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    1,
    9,
    4,
    9,
    3,
    9,
    1002,
    9,
    2,
    9,
    4,
    9,
    3,
    9,
    102,
    2,
    9,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    2,
    9,
    4,
    9,
    3,
    9,
    1001,
    9,
    2,
    9,
    4,
    9,
    3,
    9,
    101,
    2,
    9,
    9,
    4,
    9,
    3,
    9,
    102,
    2,
    9,
    9,
    4,
    9,
    99,
]);
